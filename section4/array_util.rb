# 要素取得
a = [1, 2, 3, 4, 5]
# 2つめの要素から3つ分の要素を取り出す
a[1, 3] #=>[2,3,4]

# 取得したい要素の添字を複数指定できる
a.values_at(0, 2, 4) # =>[1,3,5]

# 最後の要素を取得する
a[a.size -1] # => 5
a[-1] # => 5

# 最後から2番目の要素を取得する
a[-2]

# 最後から二番目の要素から２つの要素を取得する
a[-2, 2] # => [2,3]

# 最後の要素を取得する
a.last #=> 5

# 最後のn個の要素を取得する
a.last(2) # => [4,5]

# 最初のn個の要素を取得する
a.first # => 1
a.first(2) # => [1,2]

# 要素の変更
a = [1, 2, 3, 4, 5]
# 2つ目から３要素分を１００で置き換える
a[1, 3] = 100
a # => [1,100,5]

a = []
# 要素を追加する
a.push(1) # => [1]
a.push(2, 3) # => [2,3]

# 指定した値に一致する要素を削除する
a = [1, 2, 3, 1, 2, 3]
a.delete(2) # => 2
a # => [1,3,1,3]

# 存在しない値を指定するとnilが返る
a.delete(5) # => nil
a # => [1,3,1,3]

# 配列の連結
a = [1]
b = [2, 3]
a.concat(b) #=> [1,2,3]

# aは変更される(破壊的)
a # => [1,2,3]

# bは変更されない
b # => [2,3]

a = [1]

b = [2, 3]
a + b # => [1,2,3]

# aもbも変更されない(非破壊的)
a #=>[1]
b #=>[2,3]

# 和集合を返す
#２つの配列から重複しないようにして返す
a = [1, 2, 3]
b = [3, 4, 5]
a | b # => [1,2,3,4,5]

# 差集合を返す
# 左の配列から右の配列に含まれる要素を取り除く
a - b # => [1,2]

# 積集合を返す
# 2つの配列に共通する要素を返す
a & b # => [3]

# 多重代入で残りの全要素を配列として受け取る
# 通常ははみ出した値は切り捨てられる
e, f = 100, 200, 300
e # => 100
f # => 200

# 左辺の変数に*をつけると残りの全要素を配列として受け取る
e, *f = 100, 200, 300
e # => 100
f # => [200,300]

# 配列を複数の引数として展開する
# 配列をそのまま追加する
a = []
b = [2, 3]
a.push(1) # => [1]
a.push(b) # => [1,[2,3]]

# 配列を複数の引数として渡す
a = []
b = [2, 3]
a.push(1) # => [1]
a.push(*b) # => [1,2,3]

a = [1, 2, 3]
# []の中に配列を置くと２重配列になる
[a] # => [[1,2,3]]

# *付きで配列を置くと、展開されて別の要素になる
[*a] # => [1,2,3]

a = [1, 2, 3]
[-1, 0, *a, 4, 5] # => [-1,0,1,2,3,4,5]

# 配列が等しいか判定する
[1, 2, 3] == [1, 2, 3] # => true

[1, 2, 3] == [1, 2, 4] # => false
[1, 2, 3] == [1, 2] # => false
[1, 2, 3] == [1, 2, 3, 4] # => false

# 文字列の配列を作る
# []で文字列の配列を作る
["apple", "melon", "orange"] # => ["apple", "melon", "orange"]

# %wで文字列の配列を作る
%w!apple melon orange! # => ["apple", "melon", "orange"]

# %wで文字列の配列を作る(丸カッコの場合)
%w(apple melon orange) # => ["apple", "melon", "orange"]

# 空白や改行が連続した場合も区切り文字になる
# %wで文字列の配列を作る
%w(
  apple
  melon
  orange
) # => ["apple", "melon", "orange"]

# 値にスペースを含めたい場合はバックスラッシュでエスケープする
%w(big\ apple small\ melon orange) # => ["big apple", "small melon", "orange"]

# 式展開や改行文字、タブ文字などを含めたい場合は%Wを使う
prefix = "This is"
%W(#{prefix}\ an\ apple small\nmelon orange) # => ["This is an apple","small\nmelon","orange"]

# 文字列を配列に変換する
"Ruby".chars # => ["R","u","b","y"]

# splitは引数で渡した区切り文字で文字列を配列に分割する
"Ruby,Java,Perl,PHP".split(",") # => ["Ruby", "Java", "Perl", "PHP"]

# 要素が５つの配列を作成する
a = Array.new(5) # => [nil, nil, nil, nil, nil]

# 要素が5つで０を初期値とする配列を作成する
a = Array.new(5, 0) # => [0, 0, 0, 0, 0]

# ブロックを使って初期値を設定する
# 要素数が10、1,2,3,1,2,3と繰り返す配列を作る
a = Array.new(10) { |n| n % 3 + 1 }
a # => [1, 2, 3, 1, 2, 3, 1, 2, 3, 1]

a = Array.new(5) { "default" }
a # => ["default", "default", "default", "default", "default"]
